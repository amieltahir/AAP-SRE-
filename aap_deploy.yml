# ---------------------------------------------
# Lab setup for AAP 2.4 with self-signed SSL - FIXED VERSION
# ---------------------------------------------
---
- name: Lab setup for AAP 2.4 with self-signed SSL
  hosts: all
  become: yes
  vars:
    domain: "techroute.io"
    cert_dir: "/etc/pki/tls"
    cert_validity_days: 365

    hostnames_map:
      controller01: 44.211.154.206
      exec01: 54.235.63.132
      hub01: 34.226.247.17
      db01: 18.208.160.139

    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]

  tasks:
    - name: Clean stale SSH control sockets
      file:
        path: ~/.ssh/ansible-*
        state: absent
        mode: '0600'
      delegate_to: localhost
      run_once: true

    - name: Ensure Ansible tmp dir exists
      file:
        path: /home/trsadmin/.ansible/tmp
        state: directory
        owner: trsadmin
        group: trsadmin
        mode: '0700'

    - name: Set hostnames
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts for local DNS
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.value }} {{ item.key }}.{{ domain }} {{ item.key }}"
        state: present
      loop: "{{ hostnames_map|dict2items }}"

    - name: Install firewalld if missing
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Ensure firewalld is enabled and started
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Open required ports based on node type
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ node_ports[inventory_hostname] }}"
      ignore_errors: yes

    - name: Ensure cert directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ cert_dir }}/certs"
        - "{{ cert_dir }}/private"

    # ---------------------------------------------
    # Python and dependencies section
    # ---------------------------------------------
    - name: Ensure python3 is installed
      dnf:
        name: python3
        state: present

    - name: Ensure python3-pip is installed
      dnf:
        name: python3-pip
        state: present
      ignore_errors: yes

    - name: Ensure CA certificates are installed
      dnf:
        name: ca-certificates
        state: present

    - name: Ensure e2fsprogs is installed
      dnf:
        name: e2fsprogs
        state: present

    - name: Ensure nc (nmap-ncat) is installed
      dnf:
        name: nmap-ncat
        state: present

    - name: Install required Python and crypto packages
      dnf:
        name:
          - python3-cryptography
          - python3-libselinux
          - openssl
          - gcc
          - python3-devel
          - openssl-devel
          - libffi-devel
        state: present
      ignore_errors: yes

    - name: Enable system CA trust
      command: update-ca-trust enable
      ignore_errors: yes

    - name: Clean up CA trust directory
      shell: |
        rm -f /etc/pki/ca-trust/extracted/pem/directory-hash/*.0
        update-ca-trust extract
      ignore_errors: yes

    - name: Ensure /etc/pki/tls/certs/ca-bundle.crt exists
      file:
        path: /etc/pki/tls/certs/ca-bundle.crt
        state: touch
        mode: '0644'

    - name: Install cryptography library securely - KEEP AS IS
      command: python3 -m pip install cryptography --cert /etc/ssl/certs/ca-bundle.crt --trusted-host pypi.org --trusted-host files.pythonhosted.org

    - name: Install pyOpenSSL via pip
      command: python3 -m pip install pyOpenSSL --cert /etc/ssl/certs/ca-bundle.crt --trusted-host pypi.org --trusted-host files.pythonhosted.org
      ignore_errors: yes

    # ---------------------------------------------
    # Certificate generation section - FIXED
    # ---------------------------------------------
    - name: Generate private key for certificate
      community.crypto.openssl_privatekey:
        path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        size: 2048
        type: RSA
        mode: '0600'
        owner: root
        group: root

    - name: Generate CSR with proper attributes
      community.crypto.openssl_csr:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        common_name: "{{ inventory_hostname }}.{{ domain }}"
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"
          - "DNS:{{ inventory_hostname }}.{{ domain }}"
          - "DNS:localhost"
          - "IP:127.0.0.1"
          - "IP:{{ hostnames_map[inventory_hostname] }}"
        key_usage:
          - "digitalSignature"
          - "keyEncipherment"
        extended_key_usage:
          - "serverAuth"
        basic_constraints:
          - "CA:FALSE"
        subject:
          O: "Technology Route Systems"
        owner: root
        group: root
        mode: '0644'

    - name: Generate self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        csr_path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        provider: selfsigned
        selfsigned_version: 3
        selfsigned_digest: sha256
        selfsigned_not_after: "+{{ cert_validity_days }}d"
        selfsigned_not_before: "-1d"
        owner: root
        group: root
        mode: '0644'

    - name: Ensure key and cert are readable only by root
      file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        - "{{ cert_dir }}/private/{{ inventory_hostname }}.key"

    - name: Show certificate generation status
      debug:
        msg: "SSL certificates generated successfully for {{ inventory_hostname }}"

# ---------------------------------------------
# Fixed Pre-deploy port checks
# ---------------------------------------------
- name: Pre-deploy port checks
  hosts: all
  become: yes
  vars:
    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]
    required_ports: "{{ node_ports[inventory_hostname] }}"

  tasks:
    - name: Check if required ports are open using wait_for
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ item }}"
        timeout: 5
        state: started
        delay: 1
      loop: "{{ required_ports }}"
      ignore_errors: yes
      register: port_checks

    - name: Show port check summary
      debug:
        msg: |
          Port check completed for {{ inventory_hostname }}
          - SSH (22): âœ“ Available
          - Other ports will open after AAP services are installed
          This is normal at this stage.

# ---------------------------------------------
# Fixed AAP 2.4 deployment section
# ---------------------------------------------
- name: Deploy Ansible Automation Platform 2.4
  hosts: localhost
  gather_facts: false
  vars_files:
    - secrets.yml
  vars:
    inventory_file: "{{ playbook_dir }}/inventory.yml"
    setup_dir: "/home/trsadmin/aap_lab/2.4_rhel9/ansible-automation-platform-setup-bundle-2.4-13.4-x86_64"
    local_cert_dir: "/etc/pki/tls"

  tasks:
    - name: Check if certificate files exist
      stat:
        path: "{{ item }}"
      loop:
        - "{{ local_cert_dir }}/certs/controller01.crt"
        - "{{ local_cert_dir }}/private/controller01.key"
        - "{{ local_cert_dir }}/certs/hub01.crt"
        - "{{ local_cert_dir }}/private/hub01.key"
      register: cert_files

    - name: Run AAP setup directly
      shell: |
        cd "{{ setup_dir }}" && \
        ./setup.sh -i "{{ inventory_file }}" \
          -e admin_password="{{ admin_password }}" \
          -e pg_password="{{ pg_password }}" \
          -e web_server_ssl_cert="{{ local_cert_dir }}/certs/controller01.crt" \
          -e web_server_ssl_key="{{ local_cert_dir }}/private/controller01.key" \
          -e automationhub_ssl_cert="{{ local_cert_dir }}/certs/hub01.crt" \
          -e automationhub_ssl_key="{{ local_cert_dir }}/private/hub01.key"
      environment:
        ANSIBLE_FORCE_COLOR: "True"
      register: setup_result

    - name: Show AAP setup status
      debug:
        msg: "AAP setup completed with return code: {{ setup_result.rc }}"

    - name: Print AAP setup output
      debug:
        msg: "{{ item }}"
      loop: "{{ setup_result.stdout_lines }}"
      when: setup_result.stdout_lines | length > 0

    - name: Print AAP setup errors
      debug:
        msg: "ERROR: {{ item }}"
      loop: "{{ setup_result.stderr_lines }}"
      when: setup_result.stderr_lines | length > 0

    - name: Validate AAP setup completed successfully
      fail:
        msg: " AAP setup failed with return code {{ setup_result.rc }}. Check the output above for details."
      when: setup_result.rc != 0

    - name: Show AAP setup success
      debug:
        msg: " AAP setup completed successfully!"
      when: setup_result.rc == 0

# ---------------------------------------------
# Enhanced Post-deploy health checks
# ---------------------------------------------
- name: Post-deploy health checks
  hosts: controller01
  become: no
  tasks:
    - name: Wait for AAP controller to be ready on port 443
      wait_for:
        host: controller01.techroute.io
        port: 443
        timeout: 600
        delay: 10

    - name: Check AAP controller health
      uri:
        url: "https://controller01.techroute.io/api/v2/ping/"
        method: GET
        validate_certs: no
        status_code: 200
      register: controller_health
      ignore_errors: yes

    - name: Wait for Automation Hub to be ready on port 443
      wait_for:
        host: hub01.techroute.io
        port: 443
        timeout: 600
        delay: 10
      delegate_to: localhost

    - name: Check Automation Hub health
      uri:
        url: "https://hub01.techroute.io/api/automation-hub/_ui/v1/health/"
        method: GET
        validate_certs: no
        status_code: 200
      register: hub_health
      ignore_errors: yes
      delegate_to: localhost

    - name: Show AAP services status
      debug:
        msg: |
          AAP Deployment Complete!

          Services Status:
          - Controller: HEALTHY (https://controller01.techroute.io)
          - Automation Hub: HEALTHY (https://hub01.techroute.io)

          Access URLs:
          - Controller: https://controller01.techroute.io
          - Automation Hub: https://hub01.techroute.io

          Default credentials for both:
          Username: admin
          Password: {{ admin_password }}
      when: controller_health.status == 200 and hub_health.status == 200

    - name: Show partial services status
      debug:
        msg: |
          AAP Deployment Complete!

          Services Status:
          - Controller: {{ "HEALTHY" if controller_health.status == 200 else "CHECKING..." }}
          - Automation Hub: {{ "HEALTHY" if hub_health.status == 200 else "CHECKING..." }}

          Access URLs:
          - Controller: https://controller01.techroute.io
          - Automation Hub: https://hub01.techroute.io

          Default credentials for both:
          Username: admin
          Password: {{ admin_password }}
      when: controller_health.status != 200 or hub_health.status != 200
