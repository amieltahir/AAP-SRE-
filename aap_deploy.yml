---
- name: Lab setup for AAP 2.4 with self-signed SSL
  hosts: all
  become: yes
  vars:
    domain: "techroute.io"
    cert_dir: "/etc/ssl/techroute"
    cert_validity_days: 365

    # Hostnames mapping
    hostnames_map:
      controller01: 44.211.154.206
      exec01: 54.235.63.132
      hub01: 34.226.247.17
      db01: 18.208.160.139

    # Required ports depending on node type
    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]

  tasks:

    - name: Set hostnames
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts for local DNS
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.value }} {{ item.key }}.{{ domain }} {{ item.key }}"
        state: present
      loop: "{{ hostnames_map|dict2items }}"

    - name: Install firewalld if missing
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Ensure firewalld is enabled and started
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Open required ports based on node type
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ node_ports[inventory_hostname] }}"

    - name: Create cert directory
      ansible.builtin.file:
        path: "{{ cert_dir }}"
        state: directory
        mode: '0755'

    - name: Generate self-signed certificate
      community.crypto.x509_certificate:
        path: "{{ cert_dir }}/{{ inventory_hostname }}.crt"
        privatekey_path: "{{ cert_dir }}/{{ inventory_hostname }}.key"
        common_name: "{{ inventory_hostname }}.{{ domain }}"
        provider: selfsigned
        days: "{{ cert_validity_days }}"
        attributes:
          organizationalUnitName: "TRS Lab"
          organizationName: "Technology Route Systems"
          localityName: "Toronto"
          stateOrProvinceName: "Ontario"
          countryName: "CA"

    - name: Ensure key and cert are readable only by root
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - "{{ cert_dir }}/{{ inventory_hostname }}.crt"
        - "{{ cert_dir }}/{{ inventory_hostname }}.key"

- name: Distribute certs and keys to AAP nodes
  hosts: localhost
  gather_facts: false
  vars:
    cert_dir: "/etc/ssl/techroute"
  tasks:
    - name: Copy SSL certs to all nodes
      ansible.builtin.copy:
        src: "{{ cert_dir }}/{{ item }}.crt"
        dest: "{{ cert_dir }}/{{ item }}.crt"
        owner: root
        group: root
        mode: '0600'
      loop:
        - controller01
        - exec01
        - hub01
        - db01
      delegate_to: "{{ item }}"

    - name: Copy SSL private keys to all nodes
      ansible.builtin.copy:
        src: "{{ cert_dir }}/{{ item }}.key"
        dest: "{{ cert_dir }}/{{ item }}.key"
        owner: root
        group: root
        mode: '0600'
      loop:
        - controller01
        - exec01
        - hub01
        - db01
      delegate_to: "{{ item }}"

- name: Pre-deploy port checks
  hosts: all
  become: yes
  vars:
    required_ports: "{{ node_ports[inventory_hostname] }}"
  tasks:
    - name: Check if required ports are open on host
      ansible.builtin.shell: |
        for port in {{ required_ports | join(' ') }}; do
            nc -zvw3 127.0.0.1 $port
        done
      register: port_check
      ignore_errors: yes

    - name: Print port check results
      ansible.builtin.debug:
        var: port_check.stdout_lines

    - name: Warn if ports are not open
      ansible.builtin.fail:
        msg: "Some required ports are not open on {{ inventory_hostname }}!"
      when: port_check.rc != 0

- name: Deploy Ansible Automation Platform 2.4
  hosts: localhost
  gather_facts: false
  vars_files:
    - secrets.yml

  vars:
    inventory_file: "{{ playbook_dir }}/inventory.yml"
    setup_dir: "{{ playbook_dir }}/2.4_rhel9/ansible-automation-platform-setup-bundle-2.4-13.4-x86_64"
    ansible_collections_path: "{{ setup_dir }}/collections"
    cert_dir: "/etc/ssl/techroute"

  tasks:

    - name: Ensure AAP setup directory exists
      ansible.builtin.file:
        path: "{{ setup_dir }}"
        state: directory

    - name: Run AAP setup installer with SSL paths
      ansible.builtin.command: >
        ./setup.sh
        -i {{ inventory_file }}
        -e admin_password={{ admin_password }}
        -e pg_password={{ pg_password }}
        -e web_server_ssl_cert={{ cert_dir }}/controller01.crt
        -e web_server_ssl_key={{ cert_dir }}/controller01.key
        -e automationhub_ssl_cert={{ cert_dir }}/hub01.crt
        -e automationhub_ssl_key={{ cert_dir }}/hub01.key
      args:
        chdir: "{{ setup_dir }}"
      environment:
        ANSIBLE_FORCE_COLOR: "True"
        ANSIBLE_ERROR_ON_UNDEFINED_VARS: "True"
        ANSIBLE_COLLECTIONS_PATH: "{{ ansible_collections_path }}"
      register: setup_result
      ignore_errors: false

    - name: Print AAP setup logs
      ansible.builtin.debug:
        var: setup_result.stdout_lines

- name: Post-deploy health checks
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Check Controller HTTPS
      ansible.builtin.uri:
        url: "https://controller01.techroute.io:443"
        method: GET
        validate_certs: no
        return_content: no
      register: controller_health
      retries: 5
      delay: 10
      until: controller_health.status == 200

    - name: Check Hub HTTPS
      ansible.builtin.uri:
        url: "https://hub01.techroute.io:443"
        method: GET
        validate_certs: no
        return_content: no
      register: hub_health
      retries: 5
      delay: 10
      until: hub_health.status == 200

    - name: Check DB port 5432 externally
      ansible.builtin.shell: nc -zvw3 db01.techroute.io 5432
      register: db_health
      ignore_errors: yes

    - name: Print DB health check
      ansible.builtin.debug:
        var: db_health.stdout_lines
