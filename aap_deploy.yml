# ---------------------------------------------
# Lab setup for AAP 2.4 with self-signed SSL
# ---------------------------------------------
---
- name: Lab setup for AAP 2.4 with self-signed SSL
  hosts: all
  become: yes
  vars:
    domain: "techroute.io"
    cert_dir: "/etc/pki/tls"
    cert_validity_days: 365

    hostnames_map:
      controller01: 44.211.154.206
      exec01: 54.235.63.132
      hub01: 34.226.247.17
      db01: 18.208.160.139

    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]

  tasks:
    - name: Set hostnames
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts for local DNS
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.value }} {{ item.key }}.{{ domain }} {{ item.key }}"
        state: present
      loop: "{{ hostnames_map|dict2items }}"

    - name: Install firewalld if missing
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Ensure firewalld is enabled and started
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Open required ports based on node type
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ node_ports[inventory_hostname] }}"

    - name: Ensure cert directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ cert_dir }}/certs"
        - "{{ cert_dir }}/private"

    # ---------------------------------------------
    # Ensure Python, pip, and cryptography with CA bundle
    # ---------------------------------------------
    - name: Ensure python3 is installed
      dnf:
        name: python3
        state: present

    - name: Ensure python3-pip is installed
      dnf:
        name: python3-pip
        state: present

    - name: Ensure CA certificates are installed
      dnf:
        name: ca-certificates
        state: present

    - name: Enable system CA trust
      command: update-ca-trust force-enable

    - name: Ensure /etc/pki/tls/certs/ca-bundle.crt exists
      file:
        path: /etc/pki/tls/certs/ca-bundle.crt
        state: touch
        mode: '0644'

    - name: Upgrade pip, setuptools, wheel using system CA bundle
      command: python3 -m pip install --upgrade pip setuptools wheel
      environment:
        SSL_CERT_FILE: /etc/pki/tls/certs/ca-bundle.crt

    - name: Install cryptography library securely
      command: python3 -m pip install cryptography
      environment:
        SSL_CERT_FILE: /etc/pki/tls/certs/ca-bundle.crt

    # ---------------------------------------------
    # Self-signed certificate generation
    # ---------------------------------------------
    - name: Generate private key for certificate
      community.crypto.openssl_privatekey:
        path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        size: 2048
        type: RSA
        mode: '0600'
        owner: root
        group: root

    - name: Generate CSR with SANs
      community.crypto.openssl_csr:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        common_name: "{{ inventory_hostname }}"
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"
          - "DNS:localhost"
          - "IP:127.0.0.1"
        attributes:
          organizationName: "Technology Route Systems"
        owner: root
        group: root
        mode: '0644'

    - name: Generate self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        csr_path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        provider: selfsigned
        selfsigned_version: 3
        selfsigned_digest: sha256
        selfsigned_create_subject_key_identifier: create_if_not_provided
        selfsigned_not_after: "+{{ cert_validity_days }}d"
        selfsigned_not_before: "+0s"
        owner: root
        group: root
        mode: '0644'

    - name: Ensure key and cert are readable only by root
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        - "{{ cert_dir }}/private/{{ inventory_hostname }}.key"

# ---------------------------------------------
# Pre-deploy port checks
# ---------------------------------------------
- name: Pre-deploy port checks
  hosts: all
  become: yes
  vars:
    required_ports: "{{ node_ports[inventory_hostname] }}"
  tasks:
    - name: Check if required ports are open on host
      ansible.builtin.shell: |
        for port in {{ required_ports | join(' ') }}; do
            nc -zvw3 127.0.0.1 $port
        done
      register: port_check
      ignore_errors: yes

    - name: Print port check results
      ansible.builtin.debug:
        var: port_check.stdout_lines

    - name: Warn if ports are not open
      ansible.builtin.fail:
        msg: "Some required ports are not open on {{ inventory_hostname }}!"
      when: port_check.rc != 0

# ---------------------------------------------
# Deploy AAP 2.4 in pyenv virtualenv
# ---------------------------------------------
- name: Deploy Ansible Automation Platform 2.4
  hosts: localhost
  gather_facts: false
  vars_files:
    - secrets.yml
  vars:
    inventory_file: "{{ playbook_dir }}/inventory.yml"
    setup_dir: "/home/trsadmin/aap_lab/2.4_rhel9/ansible-automation-platform-setup-bundle-2.4-13.4-x86_64"
    ansible_collections_path: "{{ setup_dir }}/collections"
    cert_dir: "{{ cert_dir }}"
    pyenv_path: "/home/trsadmin/.pyenv"

  tasks:
    - name: Ensure AAP setup directory exists
      ansible.builtin.file:
        path: "{{ setup_dir }}"
        state: directory

    - name: Install pyenv if missing
      ansible.builtin.shell: curl https://pyenv.run | bash
      args:
        creates: "{{ pyenv_path }}"

    - name: Install Python 3.10 in pyenv
      ansible.builtin.shell: "{{ pyenv_path }}/bin/pyenv install -s 3.10.13"
      environment:
        PYENV_ROOT: "{{ pyenv_path }}"
        PATH: "{{ pyenv_path }}/bin:{{ pyenv_path }}/shims:{{ ansible_env.PATH }}"

    - name: Create pyenv virtualenv for AAP
      ansible.builtin.shell: "{{ pyenv_path }}/bin/pyenv virtualenv -f 3.10.13 aap-env"
      environment:
        PYENV_ROOT: "{{ pyenv_path }}"
        PATH: "{{ pyenv_path }}/bin:{{ pyenv_path }}/shims:{{ ansible_env.PATH }}"
      args:
        creates: "{{ pyenv_path }}/versions/aap-env"

    - name: Run AAP setup installer inside pyenv virtualenv
      ansible.builtin.shell: |
        source {{ pyenv_path }}/versions/aap-env/bin/activate \
        && ./setup.sh -i {{ inventory_file }} \
           -e admin_password={{ admin_password }} \
           -e pg_password={{ pg_password }} \
           -e web_server_ssl_cert={{ cert_dir }}/certs/controller01.crt \
           -e web_server_ssl_key={{ cert_dir }}/private/controller01.key \
           -e automationhub_ssl_cert={{ cert_dir }}/certs/hub01.crt \
           -e automationhub_ssl_key={{ cert_dir }}/private/hub01.key
      args:
        chdir: "{{ setup_dir }}"
      environment:
        ANSIBLE_FORCE_COLOR: "True"
        ANSIBLE_ERROR_ON_UNDEFINED_VARS: "True"
        ANSIBLE_COLLECTIONS_PATH: "{{ ansible_collections_path }}"
      register: setup_result

    - name: Print AAP setup logs
      ansible.builtin.debug:
        var: setup_result.stdout_lines

# ---------------------------------------------
# Post-deploy health checks
# ---------------------------------------------
- name: Post-deploy health checks
  hosts: all
  become: no
  tasks:
    - name: Wait for port 443 on controller01
      ansible.builtin.wait_for:
        host: controller01
        port: 443
        timeout: 30

