# ---------------------------------------------
# Lab setup for AAP 2.4 with self-signed SSL - COMPLETE FIXED VERSION
# ---------------------------------------------
---
- name: Lab setup for AAP 2.4 with self-signed SSL
  hosts: all
  become: yes
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
    domain: "techroute.io"
    cert_dir: "/etc/pki/tls"
    cert_validity_days: 365
    hostnames_map:
      controller01: 3.82.121.77
      exec01: 18.212.25.216
      hub01: 54.161.70.165
      db01: 54.210.1.240
    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]
  vars_files:
    - secrets.yml

  tasks:
    - name: Clean stale SSH control sockets
      file:
        path: ~/.ssh/ansible-*
        state: absent
        mode: '0600'
      delegate_to: localhost
      run_once: true

    - name: Ensure Ansible tmp dir exists
      file:
        path: /home/trsadmin/.ansible/tmp
        state: directory
        owner: trsadmin
        group: trsadmin
        mode: '0700'

    - name: Set hostnames
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts for local DNS
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ item.value }} {{ item.key }}.{{ domain }} {{ item.key }}"
        state: present
      loop: "{{ hostnames_map|dict2items }}"

    - name: Install firewalld if missing
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Ensure firewalld is enabled and started
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Open required ports based on node type
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ node_ports[inventory_hostname] }}"
      ignore_errors: yes

    - name: Ensure cert directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ cert_dir }}/certs"
        - "{{ cert_dir }}/private"

    # ---------------------------------------------
    # Python and dependencies section
    # ---------------------------------------------
    - name: Ensure python3 is installed
      dnf:
        name: python3
        state: present

    - name: Ensure python3-pip is installed
      dnf:
        name: python3-pip
        state: present
      ignore_errors: yes

    - name: Ensure CA certificates are installed
      dnf:
        name: ca-certificates
        state: present

    - name: Ensure e2fsprogs is installed
      dnf:
        name: e2fsprogs
        state: present

    - name: Ensure nc (nmap-ncat) is installed
      dnf:
        name: nmap-ncat
        state: present

    - name: Install required Python and crypto packages
      dnf:
        name:
          - python3-cryptography
          - python3-libselinux
          - openssl
          - gcc
          - python3-devel
          - openssl-devel
          - libffi-devel
        state: present
      ignore_errors: yes

    - name: Enable system CA trust
      command: update-ca-trust enable
      ignore_errors: yes

    - name: Clean up CA trust directory
      shell: |
        rm -f /etc/pki/ca-trust/extracted/pem/directory-hash/*.0
        update-ca-trust extract
      ignore_errors: yes

    - name: Ensure /etc/pki/tls/certs/ca-bundle.crt exists
      file:
        path: /etc/pki/tls/certs/ca-bundle.crt
        state: touch
        mode: '0644'

    - name: Install cryptography library securely - KEEP AS IS
      command: python3 -m pip install cryptography --cert /etc/ssl/certs/ca-bundle.crt --trusted-host pypi.org --trusted-host files.pythonhosted.org

    - name: Install pyOpenSSL via pip
      command: python3 -m pip install pyOpenSSL --cert /etc/ssl/certs/ca-bundle.crt --trusted-host pypi.org --trusted-host files.pythonhosted.org
      ignore_errors: yes

    # ---------------------------------------------
    # Certificate generation section - FIXED
    # ---------------------------------------------
    - name: Generate private key for certificate
      community.crypto.openssl_privatekey:
        path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        size: 2048
        type: RSA
        mode: '0600'
        owner: root
        group: root

    - name: Generate CSR with proper attributes
      community.crypto.openssl_csr:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        common_name: "{{ inventory_hostname }}.{{ domain }}"
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"
          - "DNS:{{ inventory_hostname }}.{{ domain }}"
          - "DNS:localhost"
          - "IP:127.0.0.1"
          - "IP:{{ hostnames_map[inventory_hostname] }}"
        key_usage:
          - "digitalSignature"
          - "keyEncipherment"
        extended_key_usage:
          - "serverAuth"
        basic_constraints:
          - "CA:FALSE"
        subject:
          O: "Technology Route Systems"
        owner: root
        group: root
        mode: '0644'

    - name: Generate self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        privatekey_path: "{{ cert_dir }}/private/{{ inventory_hostname }}.key"
        csr_path: "{{ cert_dir }}/certs/{{ inventory_hostname }}.csr"
        provider: selfsigned
        selfsigned_version: 3
        selfsigned_digest: sha256
        selfsigned_not_after: "+{{ cert_validity_days }}d"
        selfsigned_not_before: "-1d"
        owner: root
        group: root
        mode: '0644'

    - name: Ensure key and cert are readable only by root
      file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - "{{ cert_dir }}/certs/{{ inventory_hostname }}.crt"
        - "{{ cert_dir }}/private/{{ inventory_hostname }}.key"

    - name: Show certificate generation status
      debug:
        msg: "SSL certificates generated successfully for {{ inventory_hostname }}"

# ---------------------------------------------
# NEW: Copy certificates to AAP expected locations
# ---------------------------------------------
- name: Copy certificates to AAP expected locations
  hosts: controller01:hub01
  become: yes
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
  vars_files:
    - secrets.yml
  tasks:
    - name: Create Tower certificate directory for controller
      file:
        path: /etc/tower
        state: directory
        owner: root
        group: awx
        mode: '0755'
      when: inventory_hostname == 'controller01'

    - name: Copy controller certificate to Tower location
      copy:
        src: "/etc/pki/tls/certs/controller01.crt"
        dest: "/etc/tower/tower.cert"
        remote_src: yes
        owner: root
        group: awx
        mode: '0644'
      when: inventory_hostname == 'controller01'

    - name: Copy controller key to Tower location
      copy:
        src: "/etc/pki/tls/private/controller01.key"
        dest: "/etc/tower/tower.key"
        remote_src: yes
        owner: root
        group: awx
        mode: '0600'
      when: inventory_hostname == 'controller01'

    - name: Create Pulp certificate directory for hub
      file:
        path: /etc/pulp/certs
        state: directory
        owner: root
        group: pulp
        mode: '0755'
      when: inventory_hostname == 'hub01'

    - name: Copy hub certificate to Pulp location
      copy:
        src: "/etc/pki/tls/certs/hub01.crt"
        dest: "/etc/pulp/certs/automationhub.crt"
        remote_src: yes
        owner: root
        group: pulp
        mode: '0644'
      when: inventory_hostname == 'hub01'

    - name: Copy hub key to Pulp location
      copy:
        src: "/etc/pki/tls/private/hub01.key"
        dest: "/etc/pulp/certs/automationhub.key"
        remote_src: yes
        owner: root
        group: pulp
        mode: '0600'
      when: inventory_hostname == 'hub01'

    - name: Verify certificates are in expected locations
      stat:
        path: "{{ item.path }}"
      loop:
        - { path: '/etc/tower/tower.cert', host: 'controller01' }
        - { path: '/etc/tower/tower.key', host: 'controller01' }
        - { path: '/etc/pulp/certs/automationhub.crt', host: 'hub01' }
        - { path: '/etc/pulp/certs/automationhub.key', host: 'hub01' }
      when: inventory_hostname == item.host
      register: cert_verify

    - name: Show certificate verification status
      debug:
        msg: "{{ item.item.path }} exists: {{ item.stat.exists }}"
      loop: "{{ cert_verify.results }}"
      when: item.stat is defined

# ---------------------------------------------
# PROPER SSL FIX - Add certificates to system trust
# ---------------------------------------------
- name: Proper SSL fix - Add certificates to system CA trust
  hosts: hub01
  become: yes
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
  tasks:
    - name: Ensure CA certificates are installed
      dnf:
        name: ca-certificates
        state: present

    - name: Copy your self-signed certificate to system CA trust
      copy:
        src: "/etc/pki/tls/certs/hub01.crt"
        dest: "/etc/pki/ca-trust/source/anchors/hub01-techroute-io.crt"
        remote_src: yes
        mode: '0644'

    - name: Copy controller certificate to system CA trust (if needed for internal communication)
      copy:
        src: "/etc/pki/tls/certs/controller01.crt"
        dest: "/etc/pki/ca-trust/source/anchors/controller01-techroute-io.crt"
        remote_src: yes
        mode: '0644'
      ignore_errors: yes

    - name: Update system CA trust with our certificates
      command: update-ca-trust extract

    - name: Verify CA bundle contains our certificates
      command: grep -l "techroute.io" /etc/pki/tls/certs/ca-bundle.crt
      register: cert_in_bundle
      ignore_errors: yes

    - name: Show certificate verification
      debug:
        msg: "Our certificates in CA bundle: {{ 'YES' if cert_in_bundle.rc == 0 else 'NO' }}"

    - name: Set persistent SSL environment for all users
      blockinfile:
        path: /etc/environment
        block: |
          REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
          SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt
        marker: "# {mark} ANSIBLE MANAGED SSL CONFIG"

    - name: Set Pulpcore-specific environment
      blockinfile:
        path: /etc/sysconfig/pulpcore
        block: |
          REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
          SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt
        create: yes
        marker: "# {mark} ANSIBLE MANAGED SSL CONFIG"

    - name: Create systemd drop-in for Pulpcore services
      copy:
        content: |
          [Service]
          Environment="REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt"
          Environment="SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt"
        dest: /etc/systemd/system/pulpcore-api.service.d/ssl.conf
        mode: '0644'

    - name: Reload systemd to apply environment
      systemd:
        daemon_reload: yes

    - name: Test Pulpcore with proper SSL configuration
      command: /usr/bin/pulpcore-manager check
      environment:
        REQUESTS_CA_BUNDLE: /etc/pki/tls/certs/ca-bundle.crt
        SSL_CERT_FILE: /etc/pki/tls/certs/ca-bundle.crt
      register: pulp_ssl_test
      ignore_errors: yes

    - name: Show proper SSL test result
      debug:
        msg: "Pulpcore with proper SSL: {{ 'SUCCESS' if pulp_ssl_test.rc == 0 else 'FAILED - ' + pulp_ssl_test.stderr | default('') }}"

# ---------------------------------------------
# Fixed Pre-deploy port checks
# ---------------------------------------------
- name: Pre-deploy port checks
  hosts: all
  become: yes
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
    node_ports:
      controller01: [22, 80, 443]
      hub01: [22, 80, 443]
      exec01: [22]
      db01: [22, 5432]
    required_ports: "{{ node_ports[inventory_hostname] }}"

  tasks:
    - name: Check if required ports are open using wait_for
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ item }}"
        timeout: 5
        state: started
        delay: 1
      loop: "{{ required_ports }}"
      ignore_errors: yes
      register: port_checks

    - name: Show port check summary
      debug:
        msg: |
          Port check completed for {{ inventory_hostname }}
          - SSH (22): ✓ Available
          - Other ports will open after AAP services are installed
          This is normal at this stage.

# ---------------------------------------------
# Create Automation Hub Database and User
# ---------------------------------------------
- name: Create Automation Hub Database and User
  hosts: db01
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
  vars_files:
    - secrets.yml
  tasks:
    - name: Create automationhub database user
      postgresql_user:
        name: automationhub
        password: "{{ pg_password }}"
        state: present

    - name: Create automationhub database
      postgresql_db:
        name: automationhub
        owner: automationhub
        state: present

    - name: Verify databases exist
      command: psql -l
      register: db_list

    - name: Show database list
      debug:
        msg: "{{ db_list.stdout_lines }}"

# ---------------------------------------------
# Deploy Ansible Automation Platform 2.4
# ---------------------------------------------
- name: Deploy Ansible Automation Platform 2.4
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
    inventory_file: "{{ playbook_dir }}/inventory_controller_only.yml"
    setup_dir: "/home/trsadmin/aap_lab/2.4_rhel9/aap-setup"
  vars_files:
    - secrets.yml

  tasks:
    - name: Verify certificates exist on remote nodes
      wait_for:
        host: "{{ item.host }}"
        port: 22
        search_regex: "OpenSSH"
        timeout: 30
      loop:
        - { host: "controller01.techroute.io" }
        - { host: "hub01.techroute.io" }
      delegate_to: localhost

    - name: Run AAP setup with certificates in expected locations
      shell: |
        cd "{{ setup_dir }}" && \
        ./setup.sh -i "{{ inventory_file }}" \
          -e web_server_ssl_cert="/etc/tower/tower.cert" \
          -e web_server_ssl_key="/etc/tower/tower.key" \
          -e automationhub_ssl_cert="/etc/pulp/certs/automationhub.crt" \
          -e automationhub_ssl_key="/etc/pulp/certs/automationhub.key" \
          -e automationhub_nginx_tls_files_remote=true \
          -e automationhub_pg_host=db01 \
          -e automationhub_pg_database=automationhub \
          -e automationhub_pg_username=automationhub \
          -e automationhub_pg_password='{{ pg_password }}' \
          -e controller_nginx_tls_files_remote=true \
          -e aap_ca_configure=false \
          -e bundle_install=true \
          -e skip_ram_check=true \
          -e skip_receptor_verify=true \
          -e aap_repo_for_update=ansible-automation-platform-2.4-for-rhel-9-x86_64-rpms \
          -e @secrets.yml \
          -- --ask-vault-pass
      environment:
        ANSIBLE_FORCE_COLOR: "True"
        ANSIBLE_TIMEOUT: "60"
        ANSIBLE_SSH_TIMEOUT: "60"
        ANSIBLE_COMMAND_TIMEOUT: "600"
      args:
        executable: /bin/bash
      register: setup_result
      ignore_errors: yes

    - name: Show AAP setup status
      debug:
        msg: "AAP setup completed with return code: {{ setup_result.rc }}"

    - name: Set flag for resume needed
      set_fact:
        resume_needed: true
      when: setup_result.rc != 0

# ---------------------------------------------
# RESUME FAILED HUB INSTALLATION AFTER SSL FIX
# ---------------------------------------------
- name: Complete AAP Hub resume after collectstatic failure
  hosts: hub01
  become: yes
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
  vars_files:
    - secrets.yml

  tasks:
    - block:
        - name: Apply SSL fix for the remaining tasks
          block:
            - name: Ensure CA certificates are properly configured
              dnf:
                name: ca-certificates
                state: present

            - name: Update CA trust
              command: update-ca-trust extract

            - name: Set SSL environment for Pulp
              blockinfile:
                path: /etc/sysconfig/pulpcore
                block: |
                  REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
                  SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt
                create: yes

        - name: Run collectstatic with SSL environment
          command: /usr/bin/pulpcore-manager collectstatic --clear --noinput --link --ignore galaxy_ng
          environment:
            REQUESTS_CA_BUNDLE: /etc/pki/tls/certs/ca-bundle.crt
            SSL_CERT_FILE: /etc/pki/tls/certs/ca-bundle.crt
            PULP_SETTINGS: /etc/pulp/settings.py
          register: collectstatic_result
          ignore_errors: yes

        - name: Show collectstatic result
          debug:
            msg: "Collectstatic: {{ 'SUCCESS' if collectstatic_result.rc == 0 else 'FAILED' }}"

        - name: Restore SELinux contexts on Pulp asset dirs (handler)
          command: '/sbin/fixfiles restore /var/lib/pulp/assets'
          when: collectstatic_result.rc == 0

        - name: Restart all Pulp services (handler)
          systemd:
            name: "{{ item }}"
            state: restarted
          loop:
            - pulpcore-api.service
            - pulpcore-content.service
            - pulpcore-worker@1.service
            - pulpcore-worker@2.service
            - pulpcore-worker@3.service
          when: collectstatic_result.rc == 0

        - name: Reload nginx
          systemd:
            name: nginx
            state: reloaded
            daemon_reload: true

        - name: Run database migrations for plugins
          command: /usr/bin/pulpcore-manager migrate
          environment:
            REQUESTS_CA_BUNDLE: /etc/pki/tls/certs/ca-bundle.crt
          register: migrate_result
          ignore_errors: yes

        - name: Show migrate result
          debug:
            msg: "Migrations: {{ 'SUCCESS' if migrate_result.rc == 0 else 'FAILED' }}"

        - name: Create admin user for Automation Hub
          command: /usr/bin/pulpcore-manager createsuperuser --noinput --username admin --email admin@example.com
          environment:
            REQUESTS_CA_BUNDLE: /etc/pki/tls/certs/ca-bundle.crt
          register: create_user_result
          ignore_errors: yes

        - name: Show create user result
          debug:
            msg: "Create user: {{ 'SUCCESS' if create_user_result.rc == 0 else 'FAILED or EXISTS' }}"

        - name: Final restart of all Pulp services
          systemd:
            name: "{{ item }}"
            state: restarted
          loop:
            - pulpcore-api.service
            - pulpcore-content.service
            - pulpcore-worker@1.service
            - pulpcore-worker@2.service
            - pulpcore-worker@3.service

        - name: Ensure services are running
          systemd:
            name: "{{ item }}"
            state: started
            enabled: yes
          loop:
            - pulpcore-api.service
            - pulpcore-content.service
            - pulpcore-worker@1.service
            - pulpcore-worker@2.service
            - pulpcore-worker@3.service
            - nginx

      when: resume_needed | default(false)

    - name: Print AAP setup output
      debug:
        msg: "{{ item }}"
      loop: "{{ setup_result.stdout_lines }}"
      when: setup_result.stdout_lines | length > 0

    - name: Print AAP setup errors
      debug:
        msg: "ERROR: {{ item }}"
      loop: "{{ setup_result.stderr_lines }}"
      when: setup_result.stderr_lines | length > 0

    - name: Validate AAP setup completed successfully
      fail:
        msg: "AAP setup failed with return code {{ setup_result.rc }}. Check the output above for details."
      when: setup_result.rc != 0

    - name: Show AAP setup success
      debug:
        msg: "AAP setup completed successfully!"
      when: setup_result.rc == 0

# ---------------------------------------------
# Enhanced Post-deploy health checks
# ---------------------------------------------
- name: Post-deploy health checks
  hosts: controller01
  become: no
  vars:
    ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no'
  vars_files:
    - secrets.yml
  tasks:
    - name: Wait for AAP controller to be ready on port 443
      wait_for:
        host: controller01.techroute.io
        port: 443
        timeout: 600
        delay: 10

    - name: Check AAP controller health
      uri:
        url: "https://controller01.techroute.io/api/v2/ping/"
        method: GET
        validate_certs: no
        status_code: 200
      register: controller_health
      ignore_errors: yes

    - name: Wait for Automation Hub to be ready on port 443
      wait_for:
        host: hub01.techroute.io
        port: 443
        timeout: 600
        delay: 10
      delegate_to: localhost

    - name: Check Automation Hub health
      uri:
        url: "https://hub01.techroute.io/api/automation-hub/_ui/v1/health/"
        method: GET
        validate_certs: no
        status_code: 200
      register: hub_health
      ignore_errors: yes
      delegate_to: localhost

    - name: Show AAP services status
      debug:
        msg: |
          AAP Deployment Complete!

          Services Status:
          - Controller: HEALTHY (https://controller01.techroute.io)
          - Automation Hub: HEALTHY (https://hub01.techroute.io)

          Access URLs:
          - Controller: https://controller01.techroute.io
          - Automation Hub: https://hub01.techroute.io

          Default credentials for both:
          Username: admin
          Password: {{ admin_password }}
      when: controller_health.status == 200 and hub_health.status == 200

    - name: Show partial services status
      debug:
        msg: |
          AAP Deployment Complete!

          Services Status:
          - Controller: {{ "HEALTHY" if controller_health.status == 200 else "CHECKING..." }}
          - Automation Hub: {{ "HEALTHY" if hub_health.status == 200 else "CHECKING..." }}

          Access URLs:
          - Controller: https://controller01.techroute.io
          - Automation Hub: https://hub01.techroute.io

          Default credentials for both:
          Username: admin
          Password: {{ admin_password }}
      when: controller_health.status != 200 or hub_health.status != 200
